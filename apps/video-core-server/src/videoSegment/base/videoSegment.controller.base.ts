/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VideoSegmentService } from "../videoSegment.service";
import { VideoSegmentCreateInput } from "./VideoSegmentCreateInput";
import { VideoSegment } from "./VideoSegment";
import { VideoSegmentFindManyArgs } from "./VideoSegmentFindManyArgs";
import { VideoSegmentWhereUniqueInput } from "./VideoSegmentWhereUniqueInput";
import { VideoSegmentUpdateInput } from "./VideoSegmentUpdateInput";
import { VideoSegmentDto } from "../VideoSegmentDto";

export class VideoSegmentControllerBase {
  constructor(protected readonly service: VideoSegmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoSegment })
  async createVideoSegment(
    @common.Body() data: VideoSegmentCreateInput
  ): Promise<VideoSegment> {
    return await this.service.createVideoSegment({
      data: {
        ...data,

        camera: data.camera
          ? {
              connect: data.camera,
            }
          : undefined,
      },
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        videoPath: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoSegment] })
  @ApiNestedQuery(VideoSegmentFindManyArgs)
  async videoSegments(@common.Req() request: Request): Promise<VideoSegment[]> {
    const args = plainToClass(VideoSegmentFindManyArgs, request.query);
    return this.service.videoSegments({
      ...args,
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        videoPath: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoSegment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async videoSegment(
    @common.Param() params: VideoSegmentWhereUniqueInput
  ): Promise<VideoSegment | null> {
    const result = await this.service.videoSegment({
      where: params,
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        videoPath: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoSegment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVideoSegment(
    @common.Param() params: VideoSegmentWhereUniqueInput,
    @common.Body() data: VideoSegmentUpdateInput
  ): Promise<VideoSegment | null> {
    try {
      return await this.service.updateVideoSegment({
        where: params,
        data: {
          ...data,

          camera: data.camera
            ? {
                connect: data.camera,
              }
            : undefined,
        },
        select: {
          camera: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          videoPath: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoSegment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVideoSegment(
    @common.Param() params: VideoSegmentWhereUniqueInput
  ): Promise<VideoSegment | null> {
    try {
      return await this.service.deleteVideoSegment({
        where: params,
        select: {
          camera: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          duration: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          videoPath: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/video-segment")
  @swagger.ApiOkResponse({
    type: VideoSegmentDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateVideoSegment(
    @common.Body()
    body: string
  ): Promise<VideoSegmentDto> {
    return this.service.CreateVideoSegment(body);
  }

  @common.Get("/video-segments")
  @swagger.ApiOkResponse({
    type: VideoSegmentDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetVideoSegments(
    @common.Body()
    body: string
  ): Promise<VideoSegmentDto[]> {
    return this.service.GetVideoSegments(body);
  }
}
