/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VideoSegment as PrismaVideoSegment,
  Camera as PrismaCamera,
} from "@prisma/client";
import { VideoSegmentDto } from "../VideoSegmentDto";

export class VideoSegmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VideoSegmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.videoSegment.count(args);
  }

  async videoSegments(
    args: Prisma.VideoSegmentFindManyArgs
  ): Promise<PrismaVideoSegment[]> {
    return this.prisma.videoSegment.findMany(args);
  }
  async videoSegment(
    args: Prisma.VideoSegmentFindUniqueArgs
  ): Promise<PrismaVideoSegment | null> {
    return this.prisma.videoSegment.findUnique(args);
  }
  async createVideoSegment(
    args: Prisma.VideoSegmentCreateArgs
  ): Promise<PrismaVideoSegment> {
    return this.prisma.videoSegment.create(args);
  }
  async updateVideoSegment(
    args: Prisma.VideoSegmentUpdateArgs
  ): Promise<PrismaVideoSegment> {
    return this.prisma.videoSegment.update(args);
  }
  async deleteVideoSegment(
    args: Prisma.VideoSegmentDeleteArgs
  ): Promise<PrismaVideoSegment> {
    return this.prisma.videoSegment.delete(args);
  }

  async getCamera(parentId: string): Promise<PrismaCamera | null> {
    return this.prisma.videoSegment
      .findUnique({
        where: { id: parentId },
      })
      .camera();
  }
  async CreateVideoSegment(args: VideoSegmentDto): Promise<VideoSegmentDto> {
    throw new Error("Not implemented");
  }
  async GetVideoSegments(args: string): Promise<VideoSegmentDto[]> {
    throw new Error("Not implemented");
  }
}
